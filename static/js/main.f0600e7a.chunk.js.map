{"version":3,"sources":["contexts/FontContext.tsx","hooks/usePersistedState.ts","styles/global.ts","styles/themes/default.ts","styles/themes/dark.ts","styles/themes/light.ts","contexts/ThemeContext.tsx","pwa/serviceWorkerRegistration.ts","router.tsx","App.tsx","index.tsx"],"names":["FontSizeContext","createContext","FontSize","children","useState","Number","getComputedStyle","document","querySelector","fontSize","slice","rootFontSize","setRootFontSize","Provider","value","usePersistedState","key","initialState","state","setState","useEffect","localStorage","setItem","JSON","stringify","createGlobalStyle","theme","colors","fonts","css","Rubik","gray","title","DM","sizes","sm","accent","dark","lighten","darken","light","availableThemes","ThemeContext","Theme","currentTheme","setCurrentTheme","themes","toggleTheme","getThemes","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","Router","Home","lazy","App","fallback","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f0600e7a.chunk.js","sourcesContent":["import { createContext, Dispatch, FC, ReactNode, SetStateAction, useState } from \"react\"\n\ntype FontSizeContextProps = {\n  rootFontSize: number\n  setRootFontSize: Dispatch<SetStateAction<number>>\n}\n\nexport const FontSizeContext = createContext({} as FontSizeContextProps)\n\ntype FontSizeProviderProps = {\n  children: ReactNode\n}\n\nexport const FontSize: FC<FontSizeProviderProps> = ({ children }) => {\n  const [rootFontSize, setRootFontSize] = useState(() => {\n    return Number(getComputedStyle(document.querySelector('html') as Element).fontSize.slice(0, -2) || 16);\n  })\n\n  return (\n    <FontSizeContext.Provider value={{ rootFontSize, setRootFontSize }}>\n      {children}\n    </FontSizeContext.Provider>\n  )\n}","import { Dispatch, SetStateAction, useEffect, useState } from \"react\"\n\ntype Response<T> = [\n  T,\n  Dispatch<SetStateAction<T>>\n]\n\nexport function usePersistedState<T>(key: string, initialState: T): Response<T> {\n  const [state, setState] = useState(() => {\n    return initialState\n  })\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state))\n  }, [key, state])\n\n  return [state, setState]\n}","import { createGlobalStyle, css } from \"styled-components\"\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    transition: background 400ms;\n  }\n\n  html, body {\n    width: 100%;\n    height: 100%;\n    \n    ${({ theme: { colors, fonts } }) => css`\n      font-family: ${fonts.Rubik};\n      color: ${colors.gray[50]};\n      background: ${colors.gray[600]}\n    `}\n  }\n\n  ul {\n    list-style: none;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  [data-reset] {\n    margin: 0;\n    padding: 0;\n    color: inherit;\n    background: transparent;\n    display: grid;\n    place-items: center;\n  }\n\n  :focus {\n    outline: 0;\n  }\n`","export const theme = {\n  title: \"default\",\n\n  fonts: {\n    DM: \"'DM Sans', sans-serif\",\n    Rubik: \"'Rubik', sans-serif\"\n  },\n\n  sizes: {\n    sm: \"3.125rem\"\n  },\n\n  colors: {\n    accent: {\n      100: \"#FD6868\",\n      200: \"#FD4D4D\",\n      300: \"\"\n    },\n\n    gray: {\n      50: \"hsl(255, 1%, 98%)\",\n      100: \"hsl(255, 6%, 90%)\",\n      200: \"hsl(220, 6%, 80%)\",\n      300: \"hsl(220, 6%, 70%)\",\n      400: \"hsl(220, 6%, 60%)\",\n      500: \"hsl(220, 6%, 50%)\",\n      600: \"hsl(220, 6%, 40%)\",\n      700: \"hsl(220, 6%, 30%)\",\n      800: \"hsl(220, 6%, 20%)\",\n      900: \"hsl(220, 6%, 9%)\",\n    }\n  }\n}","import { darken, lighten } from \"polished\"\nimport { theme } from \"./default\"\n\nconst accent = \"#FD4D4D\"\n\nexport const dark: typeof theme = {\n  ...theme,\n\n  title: \"dark\",\n\n  fonts: {\n    ...theme.fonts,\n  },\n\n  sizes: {\n    ...theme.sizes,\n  },\n\n  colors: {\n    accent: {\n      100: lighten(0.1, accent),\n      200: accent,\n      300: darken(0.1, accent)\n    },\n\n    gray: {\n      50: \"hsl(255, 1%, 98%)\",\n      100: \"hsl(255, 6%, 90%)\",\n      200: \"hsl(220, 6%, 80%)\",\n      300: \"hsl(220, 6%, 70%)\",\n      400: \"hsl(220, 6%, 60%)\",\n      500: \"hsl(220, 6%, 50%)\",\n      600: \"hsl(220, 6%, 40%)\",\n      700: \"hsl(220, 6%, 30%)\",\n      800: \"hsl(220, 6%, 20%)\",\n      900: \"hsl(220, 6%, 9%)\",\n    }\n  }\n}","import { theme } from \"./default\"\n\nexport const light: typeof theme = {\n  ...theme,\n\n  title: \"light\",\n\n  fonts: {\n    ...theme.fonts,\n  },\n\n  sizes: {\n    ...theme.sizes,\n  },\n\n  colors: {\n    accent: {\n      100: \"#FD6868\",\n      200: \"#FD4D4D\",\n      300: \"\"\n    },\n\n    gray: {\n      50: \"hsl(255, 1%, 98%)\",\n      100: \"hsl(255, 6%, 90%)\",\n      200: \"hsl(220, 6%, 80%)\",\n      300: \"hsl(220, 6%, 70%)\",\n      400: \"hsl(220, 6%, 60%)\",\n      500: \"hsl(220, 6%, 50%)\",\n      600: \"hsl(220, 6%, 40%)\",\n      700: \"hsl(220, 6%, 30%)\",\n      800: \"hsl(220, 6%, 20%)\",\n      900: \"hsl(220, 6%, 9%)\",\n    }\n  }\n}","import { createContext, FC, ReactNode } from \"react\"\nimport { DefaultTheme, ThemeProvider } from \"styled-components\"\n/*  */\nimport { usePersistedState } from \"../hooks/usePersistedState\"\nimport GlobalStyle from \"../styles/global\"\nimport { dark, light } from \"../styles/themes\"\n\n\n\nconst availableThemes = {\n  light,\n  dark\n}\n\ntype ThemeContextType = {\n  currentTheme: DefaultTheme\n  themes: keyof typeof availableThemes\n  toggleTheme: (theme: DefaultTheme) => void\n  getThemes: () => typeof availableThemes\n}\n\nexport const ThemeContext = createContext({} as ThemeContextType)\n\ntype ThemeProviderProps = {\n  children: ReactNode\n}\n\nexport const Theme: FC<ThemeProviderProps> = ({ children }) => {\n  const [currentTheme, setCurrentTheme] = usePersistedState<DefaultTheme>(\"theme\", dark)\n  const themes: keyof typeof availableThemes = \"light\" || \"dark\"\n\n  const getThemes = () => availableThemes\n\n  const toggleTheme = (theme: DefaultTheme) => {\n    setCurrentTheme(theme.title === \"light\" ? dark : light)\n  }\n\n  return (\n    <ThemeContext.Provider value={{ currentTheme, themes, toggleTheme, getThemes }}>\n      <ThemeProvider theme={currentTheme}>\n        {children}\n\n        <GlobalStyle />\n      </ThemeProvider>\n    </ThemeContext.Provider>\n  )\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FC } from \"react\"\nimport { HashRouter, Switch } from \"react-router-dom\"\n\nexport const Router: FC = ({ children }) => {\n  return (\n    <HashRouter>\n      <Switch>\n        {children}\n      </Switch>\n    </HashRouter>\n  )\n}","import { lazy, Suspense, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\n/*  */\nimport { FontSize, Theme } from \"./contexts\";\nimport { register } from './pwa/serviceWorkerRegistration';\nimport { Router } from './router';\n/*  */\nconst Home = lazy(() => import(\"./pages/Home\"))\n\nexport const App = () => {\n\tuseEffect(() => {\n\t\tregister();\n\t}, []);\n\t// <Route exact path=\"/loading\" component={() => <Loading />} />\n\t\t\t\t\t\t\n\t// \t\t\t\t\t<Route exact path=\"/fobos\">\n\t// \t\t\t\t\t\t<Redirect to=\"/\" />\n\t// \t\t\t\t\t</Route>\n\n\treturn (\n\t\t<Router>\n\t\t\t<FontSize>\n\t\t\t\t<Theme>\n\t\t\t\t\t<Suspense fallback={<h1>loading...</h1>}>\n\t\t\t\t\t\t<Route exact path=\"/\" component={() => <Home />} />\n\t\t\t\t\t</Suspense>\n\t\t\t\t</Theme>\n\t\t\t</FontSize>\n\t\t</Router>\n\t);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/*  */\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector(\"body\")\n);"],"sourceRoot":""}