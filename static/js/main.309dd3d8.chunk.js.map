{"version":3,"sources":["contexts/ThemeContext.tsx","pwa/serviceWorkerRegistration.ts","pwa/index.tsx","img/parallax-bg.jpg","components/Header/index.tsx","pages/Home/index.tsx","pages/Loading/index.tsx","components/Global/index.tsx","App.tsx","index.tsx"],"names":["ThemeContext","createContext","availableThemes","light","dark","rgb","Theme","children","useState","currentTheme","setCurrentTheme","defaultTheme","createTheme","theme","newTheme","setTheme","localStorage","setItem","document","body","setAttribute","useEffect","getItem","window","addEventListener","event","newValue","Provider","value","cycleTheme","themeArray","Object","keys","next","indexOf","length","isLocalhost","Boolean","location","hostname","match","register","config","navigator","URL","process","href","origin","swUrl","fetch","headers","then","response","contentType","get","status","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","PWA","pages","Header","blur","bgImage","bg","bgImageAlt","strength","map","page","isCurrentPage","split","to","Home","useContext","className","onClick","Loading","GlobalStyles","App","fallback","path","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.309dd3d8.chunk.js","sourcesContent":["import { FC, createContext, useState, ReactNode, useEffect } from \"react\"\n\ntype ThemeContextType = {\n  createTheme: (theme: keyof typeof availableThemes) => void\n  setTheme: (theme: keyof typeof availableThemes) => void\n  cycleTheme: () => void\n}\n\nexport const ThemeContext = createContext({} as ThemeContextType)\n\ntype ThemeProviderProps = {\n  children: ReactNode\n}\n\nconst availableThemes = {\n  light: \"light\",\n  dark: \"dark\",\n  rgb: \"rgb\"\n}\n\n\nexport const Theme: FC<ThemeProviderProps> = ({ children }) => {\n  const [currentTheme, setCurrentTheme] = useState(\"\")\n  const defaultTheme = \"dark\"\n\n\n  /** Set initial app theme */\n  useEffect(() => setTheme(localStorage.getItem(\"theme\") || defaultTheme), [])\n\n  function createTheme(theme: keyof typeof availableThemes | string) {\n    let newTheme = theme\n\n    if(!availableThemes[theme]) {\n      newTheme = defaultTheme\n    }\n    \n    setTheme(newTheme)\n  }\n\n  /** Just set theme in localStorage and body */\n  function setTheme(theme: keyof typeof availableThemes | string) {\n    /** Checking localStorage for theme */\n    setCurrentTheme(theme)\n\n    localStorage.setItem(\"theme\", theme)\n    document.body.setAttribute(\"data-theme\", theme)\n  }\n\n  /** This will cycle through all themes */\n  function cycleTheme() {\n    const themeArray: [keyof typeof availableThemes] | any[] = Object.keys(availableThemes)\n\n    const currentIndex = themeArray.indexOf(currentTheme)\n    const max = themeArray.length\n    let next  = currentIndex + 1\n\n    /** If next item reaches the max of the array, set it to the first array item */\n    if(next === max) next = 0\n\n    setTheme(themeArray[next])\n  }\n  window.addEventListener(\"storage\", (event) => createTheme(event.newValue!))\n\n  return (\n    <ThemeContext.Provider value={{ createTheme, setTheme, cycleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FC, ReactNode } from \"react\"\nimport { register } from \"./serviceWorkerRegistration\"\n\ntype PWAProps = {\n  children: ReactNode\n}\n\nexport const PWA: FC<PWAProps> = ({ children }) => {\n  register()\n\n  return (\n    <>\n    {children}\n    </>\n  )\n}","export default __webpack_public_path__ + \"static/media/parallax-bg.28ba6662.jpg\";","import { Link } from \"react-router-dom\"\n\nimport { Parallax } from \"react-parallax\"\nimport bg from \"../../img/parallax-bg.jpg\"\n\nimport \"./styles.scss\"\n\nconst pages = [\"início\", \"artigos\", \"recursos\", \"vídeos\", \"plataforma\", \"sobre\"]\n\nexport const Header = () => {\n  return (\n    <header>\n      <Parallax blur={1.4} bgImage={bg} bgImageAlt=\"nothing.\" strength={200}>\n        <h1>Blog de Química</h1>\n\n        <nav>\n          <ul>\n            {pages.map(page => {\n              const currentPage = window.location.href.split(\"/\")\n              const isCurrentPage = currentPage[4] === page\n\n              if(isCurrentPage) {\n                return (\n                  <li key={page}>\n                    <Link data-active=\"true\" to={`/${page}`}>{page}</Link>\n                  </li>\n                )\n              }\n              \n              if(isCurrentPage === false && page === pages[0]) {\n                return (\n                  <li key={page}>\n                    <Link data-active=\"true\" to={`/${page}`}>{page}</Link>\n                  </li>\n                )\n              } \n\n              return (\n                <li key={page}>\n                  <Link to={`/${page}`}>{page}</Link>\n                </li>\n              )\n            })}\n            {/* <li><Link to=\"/\" data-active=\"true\">Início</Link></li>\n            <li><Link to=\"/articles\">Artigos</Link></li>\n            <li><Link to=\"/articles\">Recursos</Link></li>\n            <li><Link to=\"/articles\">Vídeos</Link></li>\n            <li><Link to=\"/articles\">Plataforma</Link></li>\n            <li><Link to=\"/articles\" data-info=\"enem\">ENEM</Link></li>\n            <li><Link to=\"/about\">Sobre</Link></li> */}\n          </ul>\n        </nav>\n      </Parallax>\n    </header>\n  )\n}","import { useContext } from \"react\"\n\nimport { ThemeContext } from \"../../contexts/ThemeContext\"\nimport { Header } from \"../../components/Header\"\n\nimport \"./styles.scss\"\n\nexport const Home = () => {\n  const { cycleTheme } = useContext(ThemeContext)\n  return (\n    <>\n      <main className=\"homeContainer\">\n          <Header />\n\n          <section>\n            <h1>Change the theme!</h1>\n            <button onClick={() => cycleTheme()}>Change theme</button>\n          </section>\n      </main>\n    </>\n  );\n};\n","export const Loading = () => {\n  return (\n    <h1>loading...</h1>\n  )\n}","import { FC, ReactNode } from 'react';\nimport { Header } from '../Header';\n\nimport './styles.scss';\n\ntype GlobalStylesType = {\n  children: ReactNode\n}\n\nexport const GlobalStyles: FC<GlobalStylesType> = ({ children }) => {\n  return (\n    <>\n      {children}\n    </>\n  )\n};\n","import { Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { Theme } from \"./contexts/ThemeContext\"\nimport { PWA } from \"./pwa\"\n\nimport { Home, Loading } from './pages';\n\nimport { GlobalStyles } from './components/Global';\n\nexport const App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Suspense fallback={Loading}>\n        <PWA>\n          <GlobalStyles>\n            <Theme>\n              <Route path=\"/\" exact component={() => <Home />} />\n            </Theme>\n          </GlobalStyles>\n        </PWA>\n        </Suspense>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);"],"sourceRoot":""}